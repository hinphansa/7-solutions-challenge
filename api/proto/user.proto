syntax = "proto3";

package user;

option go_package = "github.com/hinphansa/7-solutions-challenge/api/gen/user";

import "google/protobuf/timestamp.proto";

// User message represents a user in the system
message User {
  string id = 1;
  string name = 2;
  string email = 3;
  google.protobuf.Timestamp created_at = 4 [json_name="created_at"];
}

// CreateUserRequest represents the request to create a new user
message CreateUserRequest {
  string name = 1;
  string email = 2;
  string password = 3;
}

// CreateUserResponse represents the response after creating a user
message CreateUserResponse {
  string id = 1;
}

// GetUserRequest represents the request to get a user by ID
message GetUserRequest {
  string id = 1;
}

// UpdateUserRequest represents the request to update a user
message UpdateUserRequest {
  string id = 1;
  optional string name = 2;
  optional string email = 3;
}

// UpdateUserResponse represents the response after updating a user
message UpdateUserResponse {
  string message = 1;
}

// DeleteUserRequest represents the request to delete a user
message DeleteUserRequest {
  string id = 1;
}

// DeleteUserResponse represents the response after deleting a user
message DeleteUserResponse {
  string message = 1;
}

// ListUsersRequest represents the request to list users with pagination
message ListUsersRequest {
  int32 limit = 1;
  int32 offset = 2;
}

// ListUsersResponse represents the response containing a list of users
message ListUsersResponse {
  repeated User users = 1;
}

// LoginRequest represents the login request
message LoginRequest {
  string email = 1;
  string password = 2;
}

// LoginResponse represents the login response containing the JWT token
message LoginResponse {
  string token = 1;
}

// UserService defines the gRPC service for user management
service UserService {
  // Public endpoints
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUserById(GetUserRequest) returns (User);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  rpc Login(LoginRequest) returns (LoginResponse);

  // Protected endpoints (require JWT)
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
}

